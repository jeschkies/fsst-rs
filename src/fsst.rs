/* automatically generated by rust-bindgen 0.69.4 */

pub type fsst_encoder_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsst_decoder_t {
    pub version: ::std::os::raw::c_ulonglong,
    pub zeroTerminated: ::std::os::raw::c_uchar,
    pub len: [::std::os::raw::c_uchar; 255usize],
    pub symbol: [::std::os::raw::c_ulonglong; 255usize],
}
#[test]
fn bindgen_test_layout_fsst_decoder_t() {
    const UNINIT: ::std::mem::MaybeUninit<fsst_decoder_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsst_decoder_t>(),
        2304usize,
        concat!("Size of: ", stringify!(fsst_decoder_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fsst_decoder_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fsst_decoder_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsst_decoder_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zeroTerminated) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fsst_decoder_t),
            "::",
            stringify!(zeroTerminated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(fsst_decoder_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(fsst_decoder_t),
            "::",
            stringify!(symbol)
        )
    );
}
extern "C" {
    pub fn fsst_create(
        n: usize,
        lenIn: *mut usize,
        strIn: *mut *mut ::std::os::raw::c_uchar,
        zeroTerminated: ::std::os::raw::c_int,
    ) -> *mut fsst_encoder_t;
}
extern "C" {
    pub fn fsst_compress(
        encoder: *mut fsst_encoder_t,
        nstrings: usize,
        lenIn: *mut usize,
        strIn: *mut *mut ::std::os::raw::c_uchar,
        outsize: usize,
        output: *mut ::std::os::raw::c_uchar,
        lenOut: *mut usize,
        strOut: *mut *mut ::std::os::raw::c_uchar,
    ) -> usize;
}
extern "C" {
    pub fn fsst_decompress(
        decoder: *mut fsst_decoder_t,
        lenIn: usize,
        strIn: *mut ::std::os::raw::c_uchar,
        size: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> usize;
}
