/* automatically generated by rust-bindgen 0.69.4 */

pub type FsstEncoderT = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FsstFecoderT {
    pub version: ::std::os::raw::c_ulonglong,
    pub zero_terminated: ::std::os::raw::c_uchar,
    pub len: [::std::os::raw::c_uchar; 255usize],
    pub symbol: [::std::os::raw::c_ulonglong; 255usize],
}
#[test]
fn bindgen_test_layout_fsst_decoder_t() {
    const UNINIT: ::std::mem::MaybeUninit<FsstFecoderT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FsstFecoderT>(),
        2304usize,
        concat!("Size of: ", stringify!(fsst_decoder_t))
    );
    assert_eq!(
        ::std::mem::align_of::<FsstFecoderT>(),
        8usize,
        concat!("Alignment of ", stringify!(fsst_decoder_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsst_decoder_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_terminated) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fsst_decoder_t),
            "::",
            stringify!(zeroTerminated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(fsst_decoder_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(fsst_decoder_t),
            "::",
            stringify!(symbol)
        )
    );
}
extern "C" {
    #[allow(dead_code)]
    pub fn fsst_create(
        n: usize,
        lenIn: *mut usize,
        strIn: *mut *mut ::std::os::raw::c_uchar,
        zeroTerminated: ::std::os::raw::c_int,
    ) -> *mut FsstEncoderT;
}
extern "C" {
    /// Arguments
    /// fsst_encoder_t *encoder, /* IN: encoder obtained from fsst_create(). */
    /// size_t nstrings,         /* IN: number of strings in batch to compress. */
    /// size_t lenIn[],          /* IN: byte-lengths of the inputs */
    /// unsigned char *strIn[],  /* IN: input string start pointers. */
    /// size_t outsize,          /* IN: byte-length of output buffer. */
    /// unsigned char *output,   /* OUT: memory buffer to put the compressed strings in (one after the other). */
    /// size_t lenOut[],         /* OUT: byte-lengths of the compressed strings. */
    /// unsigned char *strOut[]  /* OUT: output string start pointers. Will all point into [output,output+size). */
    #[allow(dead_code)]
    pub fn fsst_compress(
        encoder: *mut FsstEncoderT,
        nstrings: usize,
        lenIn: *mut usize,
        strIn: *mut *mut ::std::os::raw::c_uchar,
        outsize: usize,
        output: *mut ::std::os::raw::c_uchar,
        lenOut: *mut usize,
        strOut: *mut *mut ::std::os::raw::c_uchar,
    ) -> usize;
}
extern "C" {
    #[allow(dead_code)]
    pub fn fsst_decompress(
        decoder: *mut FsstFecoderT,
        lenIn: usize,
        strIn: *mut ::std::os::raw::c_uchar,
        size: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> usize;
}
